# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_imgsrch', [dirname(__file__)])
        except ImportError:
            import _imgsrch
            return _imgsrch
        if fp is not None:
            try:
                _mod = imp.load_module('_imgsrch', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _imgsrch = swig_import_helper()
    del swig_import_helper
else:
    import _imgsrch
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _imgsrch.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _imgsrch.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _imgsrch.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _imgsrch.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _imgsrch.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _imgsrch.SwigPyIterator_equal(self, x)

    def copy(self):
        return _imgsrch.SwigPyIterator_copy(self)

    def next(self):
        return _imgsrch.SwigPyIterator_next(self)

    def __next__(self):
        return _imgsrch.SwigPyIterator___next__(self)

    def previous(self):
        return _imgsrch.SwigPyIterator_previous(self)

    def advance(self, n):
        return _imgsrch.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _imgsrch.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _imgsrch.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _imgsrch.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _imgsrch.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _imgsrch.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _imgsrch.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _imgsrch.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class map_scores(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map_scores, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map_scores, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _imgsrch.map_scores_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _imgsrch.map_scores___nonzero__(self)

    def __bool__(self):
        return _imgsrch.map_scores___bool__(self)

    def __len__(self):
        return _imgsrch.map_scores___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _imgsrch.map_scores___getitem__(self, key)

    def __delitem__(self, key):
        return _imgsrch.map_scores___delitem__(self, key)

    def has_key(self, key):
        return _imgsrch.map_scores_has_key(self, key)

    def keys(self):
        return _imgsrch.map_scores_keys(self)

    def values(self):
        return _imgsrch.map_scores_values(self)

    def items(self):
        return _imgsrch.map_scores_items(self)

    def __contains__(self, key):
        return _imgsrch.map_scores___contains__(self, key)

    def key_iterator(self):
        return _imgsrch.map_scores_key_iterator(self)

    def value_iterator(self):
        return _imgsrch.map_scores_value_iterator(self)

    def __setitem__(self, *args):
        return _imgsrch.map_scores___setitem__(self, *args)

    def asdict(self):
        return _imgsrch.map_scores_asdict(self)

    def __init__(self, *args):
        this = _imgsrch.new_map_scores(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _imgsrch.map_scores_empty(self)

    def size(self):
        return _imgsrch.map_scores_size(self)

    def swap(self, v):
        return _imgsrch.map_scores_swap(self, v)

    def begin(self):
        return _imgsrch.map_scores_begin(self)

    def end(self):
        return _imgsrch.map_scores_end(self)

    def rbegin(self):
        return _imgsrch.map_scores_rbegin(self)

    def rend(self):
        return _imgsrch.map_scores_rend(self)

    def clear(self):
        return _imgsrch.map_scores_clear(self)

    def get_allocator(self):
        return _imgsrch.map_scores_get_allocator(self)

    def count(self, x):
        return _imgsrch.map_scores_count(self, x)

    def erase(self, *args):
        return _imgsrch.map_scores_erase(self, *args)

    def find(self, x):
        return _imgsrch.map_scores_find(self, x)

    def lower_bound(self, x):
        return _imgsrch.map_scores_lower_bound(self, x)

    def upper_bound(self, x):
        return _imgsrch.map_scores_upper_bound(self, x)
    __swig_destroy__ = _imgsrch.delete_map_scores
    __del__ = lambda self: None
map_scores_swigregister = _imgsrch.map_scores_swigregister
map_scores_swigregister(map_scores)

class set_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_string, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _imgsrch.set_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _imgsrch.set_string___nonzero__(self)

    def __bool__(self):
        return _imgsrch.set_string___bool__(self)

    def __len__(self):
        return _imgsrch.set_string___len__(self)

    def append(self, x):
        return _imgsrch.set_string_append(self, x)

    def __contains__(self, x):
        return _imgsrch.set_string___contains__(self, x)

    def __getitem__(self, i):
        return _imgsrch.set_string___getitem__(self, i)

    def add(self, x):
        return _imgsrch.set_string_add(self, x)

    def discard(self, x):
        return _imgsrch.set_string_discard(self, x)

    def __init__(self, *args):
        this = _imgsrch.new_set_string(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _imgsrch.set_string_empty(self)

    def size(self):
        return _imgsrch.set_string_size(self)

    def clear(self):
        return _imgsrch.set_string_clear(self)

    def swap(self, v):
        return _imgsrch.set_string_swap(self, v)

    def count(self, x):
        return _imgsrch.set_string_count(self, x)

    def begin(self):
        return _imgsrch.set_string_begin(self)

    def end(self):
        return _imgsrch.set_string_end(self)

    def rbegin(self):
        return _imgsrch.set_string_rbegin(self)

    def rend(self):
        return _imgsrch.set_string_rend(self)

    def erase(self, *args):
        return _imgsrch.set_string_erase(self, *args)

    def find(self, x):
        return _imgsrch.set_string_find(self, x)

    def lower_bound(self, x):
        return _imgsrch.set_string_lower_bound(self, x)

    def upper_bound(self, x):
        return _imgsrch.set_string_upper_bound(self, x)

    def equal_range(self, x):
        return _imgsrch.set_string_equal_range(self, x)

    def insert(self, __x):
        return _imgsrch.set_string_insert(self, __x)
    __swig_destroy__ = _imgsrch.delete_set_string
    __del__ = lambda self: None
set_string_swigregister = _imgsrch.set_string_swigregister
set_string_swigregister(set_string)

class ImgSrch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImgSrch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImgSrch, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _imgsrch.new_ImgSrch()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _imgsrch.delete_ImgSrch
    __del__ = lambda self: None

    def load(self, path):
        return _imgsrch.ImgSrch_load(self, path)

    def computeLikelihoods(self, path):
        return _imgsrch.ImgSrch_computeLikelihoods(self, path)
    __swig_setmethods__["kmeanstree"] = _imgsrch.ImgSrch_kmeanstree_set
    __swig_getmethods__["kmeanstree"] = _imgsrch.ImgSrch_kmeanstree_get
    if _newclass:
        kmeanstree = _swig_property(_imgsrch.ImgSrch_kmeanstree_get, _imgsrch.ImgSrch_kmeanstree_set)
    __swig_setmethods__["images"] = _imgsrch.ImgSrch_images_set
    __swig_getmethods__["images"] = _imgsrch.ImgSrch_images_get
    if _newclass:
        images = _swig_property(_imgsrch.ImgSrch_images_get, _imgsrch.ImgSrch_images_set)
    __swig_setmethods__["index"] = _imgsrch.ImgSrch_index_set
    __swig_getmethods__["index"] = _imgsrch.ImgSrch_index_get
    if _newclass:
        index = _swig_property(_imgsrch.ImgSrch_index_get, _imgsrch.ImgSrch_index_set)
ImgSrch_swigregister = _imgsrch.ImgSrch_swigregister
ImgSrch_swigregister(ImgSrch)

# This file is compatible with both classic and new-style classes.


